{
  "name": "vcr",
  "description": "VCR: Record ajax request to later playback",
  "version": "0.0.4",
  "author": {
    "name": "elCuervo",
    "email": "elcuervo@elcuervo.co"
  },
  "keywords": [
    "vcr",
    "tdd",
    "http",
    "record"
  ],
  "directories": {
    "lib": "./lib",
    "test": "./test"
  },
  "devDependencies": {
    "gerbil": "*",
    "jquery": "*"
  },
  "dependencies": {
    "xmlhttprequest": "*"
  },
  "repositories": [
    {
      "type": "git",
      "url": "git://github.com/elcuervo/vcr.js.git"
    }
  ],
  "main": "./lib/vcr.js",
  "scripts": {
    "test": "node test/ajax.js"
  },
  "readme": "# VCR.js\n\n[![Build Status](https://secure.travis-ci.org/MoriTanosuke/FitbitAnalyzr.png?branch=master)](http://travis-ci.org/MoriTanosuke/FitbitAnalyzr)\n\n![VCR](http://upload.wikimedia.org/wikipedia/commons/thumb/5/56/N1500_v2.jpg/275px-N1500_v2.jpg)\n\nRecord XMLHttpRequest calls and saves them using localStorage or files if using\nNodejs.\nIt's a js implementation of myronmarston's [VCR](https://github.com/myronmarston/vcr)\nbut for javasccript without any dependencies\n\n```bash\n$ npm install vcr\n```\n\n## Config\n\n```javascript\nVCR.configure(function(c) {\n  c.hookInto = window.XMLHttpRequest;\n  c.cassetteLibraryDir = \"recorder\"; // default: 'cassettes'\n  c.host = \"http://localhost:9393/\"; // will prepend req url\n});\n```\n\nThe only required config it's wich object to intercept, for now only works with\nXMLHttpRequest to catch ajax requests.\n\nhookInto: object to intercept\ncassetteLibraryDir: when using nodejs defines where to store cassettes\nhost: usefull when running within node and want to cache request to save,\ndestroy, update, etc.\n\n## How to use it\n\nI try to make it as similar to original VCR as possible.\nUsing [Gerbil](http://github.com/elcuervo/gerbil) it's something like this:\n\n```javascript\nscenario(\"Ajax interception\", {\n  'setup': function() {\n    VCR.configure(function(c) {\n      c.hookInto = window.XMLHttpRequest;\n    });\n  },\n\n  'Recording ajax request': function(g) {\n    VCR.useCassette('test', function(v) {\n      XMLHttpRequest = v.XMLHttpRequest;\n\n      var makeRequest = function() {\n        var ajax = new XMLHttpRequest();\n\n        ajax.open('GET', 'test.html');\n        ajax.onreadystatechange = function() {\n          if(ajax.readyState === 4) {\n            g.assertEqual(\"Hello World!\\n\", ajax.responseText);\n          }\n        };\n        ajax.send(null);\n      }\n      // Record First Request\n      makeRequest();\n\n      // Wait for it...\n      g.setTimeout(function() { makeRequest(); }, 100);\n    });\n  }\n});\n```\n\n## What will happen?\n\nIf you are using nodejs .json files will be created as cassetes to reproduce\nafterwards. In the other hand if you are running it in a browser localStorage\nwill be used to persist the recordings.\n\n## Special Thanks\n[Pablo Dejuan](https://github.com/pdjota) for the idea.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/elcuervo/vcr.js.git"
  },
  "bugs": {
    "url": "https://github.com/elcuervo/vcr.js/issues"
  },
  "homepage": "https://github.com/elcuervo/vcr.js",
  "_id": "vcr@0.0.4",
  "dist": {
    "shasum": "d1efdec6188369024d864e5f7af691b48ee752b8"
  },
  "_from": "vcr@*",
  "_resolved": "https://registry.npmjs.org/vcr/-/vcr-0.0.4.tgz"
}
