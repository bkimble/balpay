{
  "name": "gerbil",
  "description": "Gerbil: Inquisitive, friendly animals that rarely bite, TDD for the rest of us",
  "version": "0.3.9",
  "author": {
    "name": "elCuervo",
    "email": "elcuervo@elcuervo.co"
  },
  "keywords": [
    "tdd",
    "testing",
    "gerbil",
    "simple"
  ],
  "directories": {
    "lib": "./lib",
    "test": "./test"
  },
  "repositories": [
    {
      "type": "git",
      "url": "git://github.com/elcuervo/gerbil.git"
    }
  ],
  "main": "./lib/gerbil.js",
  "scripts": {
    "test": "node test/gerbil.js"
  },
  "readme": "# Gerbil\n\n[![Build Status](https://secure.travis-ci.org/elcuervo/gerbil.png?branch=master)](http://travis-ci.org/elcuervo/gerbil)\n\n![Gerbil!](http://www.petsworld.co.uk/images/gerbil.jpg)\n\n_n_. Gerbils: Inquisitive, friendly animals that rarely bite, TDD for the rest of us\n\nGerbil attemps to be an uber simple and minimalistic testing framework for javascript.\n\n## Now with npm\n\n```bash\n$ npm install gerbil\n```\n\nOr just include the .js and run tests within a normal browser.\n\nYou can now execute the tests with node without to depend on the browser\n\n```javascript\nvar scenario = require('gerbil').scenario;\n\nscenario(\"Testing with node\", {\n  \"should work in a terminal\": function(g){\n    g.assert(true);\n  }\n});\n\n// Or if you want to access some global Gerbil stuff\n\nvar Gerbil = require('gerbil');\nvar scenario = Gerbil.scenario;\n```\n---\n\n## What it's included?\n\n### assert\nGood ol' assert, checks boolean.\n\n### assertEqual\nJust like assert but checks types AND value.\n\n### assertThrow\nAsserts the throw of an exception.\n\n### assertType\nAsserts the type of the object to evaluate.\n\n### pending\nMark the test as pending.\n\n### setTimeout\nRun the test within a time.\n\n### async\nRun async code. Eg. callbacks, timers.\n\n---\n\n## Example output\n\n![Console Errors](http://elcuervo.co/images/posts/gerbil-tdd-for-the-rest-of-us/console-output.png?1)\n\n![Console Errors](http://elcuervo.co/images/posts/gerbil-tdd-for-the-rest-of-us/error-output.png?2)\n\n## Walkthrough\n\n```javascript\n// Name the scenario you want to test and pass an object with your tests.\nscenario(\"Some useful stuff that needs to work\", {\n  // Reserved names are 'setup', 'before', 'after' and 'cleanup'. They define\n  // the steps to be executed.\n  //\n  // Every test gets one parameter, this is the test suite itself.\n  // Modifying 'this' will affect the context in the tests, it's useful when\n  // using 'setup' to initialize some state.\n  'setup': function(g) {\n    this.validName = 'Gerbil';\n  },\n  // Within the test 'this' gets the config defined in 'setup'\n  'should get the correct name': function(g) {\n    g.assertEqual(this.validName, 'Gerbil');\n  },\n\n  // Test in the feature, useful to test future events or timers.\n  'in the future': function(g) {\n    this.time = new Date().getTime();\n\n    g.setTimeout(function() {\n      g.assert(new Date().getTime() > this.time);\n    }, 1000);\n  },\n\n  // Test async code.\n  //\n  // Using the async function you can control the status of the test. This is\n  // really useful when you are testing callbacks.\n  // But remember, it's your responsability to end() the test.\n  'should be able to test asyncronous code': function(g) {\n    var asyncStuff = function() {\n      this.callback = null;\n    };\n\n    asyncStuff.prototype = {\n      eventually: function(fn) {\n        this.callback = fn;\n      },\n\n      exec: function() {\n        setTimeout(function(c) {\n          c.callback();\n        }, 500, this);\n      }\n    };\n\n    g.async(function() {\n      var async = new asyncStuff;\n      async.eventually(function() {\n        g.assert(true);\n        // end() will end the current scenario and trigger a summary\n        g.end();\n      });\n      async.exec();\n    });\n  }\n\n});\n```\n\n## Example\n\n```javascript\nscenario(\"This is my scenario\", {\n  \"setup\":  function() {\n    // When scenario starts\n    this.someThing = new Thing;\n  },\n  \"before\": function() {\n    // Before every test\n    this.someThing.magic_magic();\n  },\n  \"after\":  function() {\n    // After every test\n    this.someThing.clean();\n  },\n  \"cleanup\": function() {\n    // When the scenario ends\n    this.someThing = false;\n  },\n\n  \"MagicThing should have a length\": function(g) {\n    this.someThing.add(1);\n    g.assertEqual(this.someThing.length, 1);\n  },\n\n  \"MagicThing should be valid\": function(g) {\n    g.assert(this.someThing.valid);\n  }\n});\n```\n---\n\n## Scenario config and global config.\n\n```javascript\nvar myCoolFormatter = {\n  // Passing tests\n  \"ok\": function(msg) {},\n\n  // Failing tests\n  \"fail\": function(msg) {},\n\n  // Pending tests\n  \"pending\": function(msg) {},\n\n  // The start of a scenario\n  \"scenario\": function(msg) {},\n\n  // Report at the end of a scenario\n  \"summary\": function(msg) {}\n};\n\nscenario(\"Fancy scenario\", {\n  \"config\": function(c) {\n    c.formatter = myCoolFormatter;\n  },\n  \"somewhere over the rainbow\": function(g) {\n    g.assert(false);\n  }\n});\n\n// Or if you want to affect every gerbil scenario\n\nGerbil.globalConfig = {\n  formatter: myCoolFormatter\n}\n```\n\n### Callbacks\n\nWithing the config object you can add two types of callbacks, 'start' and\n'finish'. This can help you to trigger events after the scenario finished or a\nnice sand clock when it starts.\n\n```javascript\nscenario('configuration', {\n  'config': function(c) {\n    c.start = function(object) {};\n    c.finish = function(results) {};\n  }\n});\n\n// Of course you can define then globally:\n\nGerbil.globalConfig = {\n  start: function(object) {},\n  finish: function(results) {}\n};\n```\n\n## What's the catch?\n\nThe results are only shown in the console, the one from console.log if you use\nit in a browser.\nRun it with an open inspector or define a custom formatter if you want prettier\nresults.\nAnd in the bottom you will find the summary\n\n![Browser tests](http://elcuervo.co/images/posts/gerbil-tdd-for-the-rest-of-us/browser-output.png?1)\n\n## TODO\n  1. Get a gerbil as a pet\n\n## Contributors\n  * [foca](https://github.com/foca)\n  * [Daniel Cadenas](https://github.com/dcadenas)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/elcuervo/gerbil.git"
  },
  "bugs": {
    "url": "https://github.com/elcuervo/gerbil/issues"
  },
  "homepage": "https://github.com/elcuervo/gerbil",
  "_id": "gerbil@0.3.9",
  "dist": {
    "shasum": "76d28419c302063722c0a846ed7b2c9fea8cf1cf"
  },
  "_from": "gerbil@*",
  "_resolved": "https://registry.npmjs.org/gerbil/-/gerbil-0.3.9.tgz"
}
